--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - fourbits_top_tt04.v
    - fourbits_top_tt04_tb.v
    - clk_pc_code.v
    - clk_pc_code_master.v
    - alu_4_instructions.v
    - memory_4_4.v
    - mux_2_4bits.v
    - port_4bits.v
    - prog_input.v
    - register_4_bits.v
    - register_6bits.v
    - sumador_4_y_1.v
    - unidad_con.v
  top_module:  "fourbits_top_tt04.v"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Ozziel Gárnica Juárez, Alejandro García Equiterio"      # Your name
  title:        "Minimal system for performing arithmetic operations"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Basic processor capable of performing basic arithmetic operations, memory read/write, and port read/write operations."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      The operation of the processor relies on its programming using three types of instructions: operation-type instructions (arithmetic operations), memory-type instructions, and port-type instructions. The operation-type instructions consist of 5 bits. The two most significant bits indicate the instruction type, the third bit indicates the data storage register, and the final two bits indicate the operation to be carried out.
      The memory-type instructions are composed of 5 bits. The two most significant bits denote the instruction type (read/write), the subsequent bit specifies the register where the data is stored, and the final two bits indicate the memory address for reading/writing.
      The port-type instructions consist of 5 bits. The three most significant bits indicate the instruction type (read/write). If the instruction is a read operation, the following two bits are irrelevant. However, in the case of a write instruction, the fourth bit is disregarded, and the fifth bit indicates the register where the data will be written.
      For the execution of these operations, the processor is divided into three parts : program counter, control unit, and execution unit. The program counter consists of a 4-bit register, an adder, and an instruction memory. What this part of the processor does is to load the current memory address into the register. This signal enters the adder, which increments the address by one, and the result is placed back into the register. The memory reads the instruction from the address provided by the register and sends it to the control unit.
      The control unit receives the instruction read from memory and then activates or deactivates components as needed for the execution of the instruction. This is necessary because when multiple components are connected to a bus, there's a risk of data collision.
      The execution unit is composed of two 4-bit registers, an Arithmetic Logic Unit (ALU), multiplexers, a port, and a data memory. Its operation is divided into two parts : execution of operation-type instructions and execution of memory and port-type instructions.
      For the execution of operation-type instructions, the ALU's operation selector chooses the operation specified by the instruction. Simultaneously, the ALU's output is activated to store its result in the designated register. After the operation is completed and the result is ready, the register is activated to store the result.
      For the execution of memory-type instructions, the data memory is enabled, and the action to be performed (read/write) is indicated. Through a multiplexer, which selects the source register, the data arrives if a write operation is being performed. In the case of a read operation, the data specified by the instruction is sent to the designated register.
      Similarly, port-type instructions are executed. A multiplexer controls the write operation, and for the read operation, it depends on the activation signal from the control unit.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Reset the memory loading unit, load data into memory by placing the desired value at the instruc input, press enable to load the data, and repeat this process 16 times. Finally, observe the operation's result at the output.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - clk
    - enable
    - [4:0] instruc
    - clk_pc
    - clear
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - [7:0] port_1
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:

# The following fields are optional
  tag:          ""      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     1000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
